{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/dasch/Desktop/meetApp/client/src/components/LoginForm.js"],"sourcesContent":["\r\n\r\n// // src/components/LoginForm.js\r\n\r\n// 'use client';\r\n// import React, { useState, useEffect } from 'react';\r\n// import { TextField, Button, Typography, Box, Container, InputAdornment, IconButton, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\n// import { Visibility, VisibilityOff } from '@mui/icons-material';\r\n// import { useRouter } from 'next/navigation'; // Next.js navigation\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { login } from '../features/auth/authSlice';\r\n\r\n// export default function LoginForm() {\r\n//   const [email, setEmail] = useState('daschinmaya260@gmail.com');\r\n//   const [password, setPassword] = useState('123');\r\n//   const [error, setError] = useState('');\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n//   const [otp, setOtp] = useState(['', '', '', '', '', '']);\r\n//   const [otpError, setOtpError] = useState('');\r\n//   const [otpSent, setOtpSent] = useState(false);\r\n//   const [openSnackbar, setOpenSnackbar] = useState(false);\r\n//   const [openOtpDialog, setOpenOtpDialog] = useState(false);\r\n//   const [resendTimer, setResendTimer] = useState(30); // Time in seconds to wait before resending OTP\r\n\r\n//   const router = useRouter();\r\n//   const dispatch = useDispatch();\r\n\r\n//   // Get users from Redux store\r\n//   const users = useSelector((state) => state.auth.users);\r\n\r\n//   // Check if the user is already logged in\r\n//   useEffect(() => {\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       router.push('/notes');\r\n//     }\r\n//   }, []);\r\n\r\n//   // Resend OTP timer logic\r\n//   useEffect(() => {\r\n//     let timer;\r\n//     if (resendTimer > 0 && otpSent) {\r\n//       timer = setInterval(() => {\r\n//         setResendTimer((prev) => prev - 1);\r\n//       }, 1000);\r\n//     }\r\n//     return () => clearInterval(timer);\r\n//   }, [resendTimer, otpSent]);\r\n\r\n//   const validateEmail = (email) => {\r\n//     const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n//     return emailRegex.test(email);\r\n//   };\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n\r\n//     if (!validateEmail(email)) {\r\n//       setError('Please enter a valid email address');\r\n//       return;\r\n//     }\r\n\r\n//     // Find the user in the Redux users list\r\n//     const user = users.find((user) => user.email === email && user.password === password);\r\n\r\n//     if (user) {\r\n//       setError('');\r\n//       setOtpSent(true);\r\n//       setOpenOtpDialog(true);\r\n//     } else {\r\n//       setError('Invalid email or password');\r\n//     }\r\n//   };\r\n\r\n//   const handleOtpSubmit = () => {\r\n//     const otpValue = otp.join('');\r\n\r\n//     // Simulate OTP verification (hardcoded as '123456' for this example)\r\n//     if (otpValue === '123456') {\r\n//       const user = users.find((user) => user.email === email);\r\n\r\n//       if (user) {\r\n//         // Store token and user data in Redux and localStorage\r\n//         dispatch(login({ token: user.token, username: user.name, role: user.role, email: user.email }));\r\n//         localStorage.setItem('token', user.token);\r\n//         localStorage.setItem('username', user.name);\r\n//         localStorage.setItem('role', user.role);\r\n//         localStorage.setItem('email', user.email);\r\n\r\n//         setOpenSnackbar(true);\r\n//         // Redirect based on role\r\n//         if (user.role === 'admin') {\r\n//           router.push('/admin-pannel');\r\n//         } else {\r\n//           router.push('/notes');\r\n//         }\r\n//         setOpenOtpDialog(false); // Close the OTP dialog after successful login\r\n//       } else {\r\n//         setOtpError('User not found.');\r\n//       }\r\n//     } else {\r\n//       setOtpError('Invalid OTP. Please try again.');\r\n//     }\r\n//   };\r\n\r\n//   const handleOtpChange = (e, index) => {\r\n//     const value = e.target.value;\r\n\r\n//     if (/^\\d$/.test(value) || value === '') {\r\n//       const newOtp = [...otp];\r\n//       newOtp[index] = value;\r\n//       setOtp(newOtp);\r\n\r\n//       // Auto submit OTP if all digits are filled\r\n//       if (newOtp.every((digit) => digit !== '') && newOtp.length === 6) {\r\n//         handleOtpSubmit();\r\n//       }\r\n\r\n//       if (value && index < otp.length - 1) {\r\n//         document.getElementById(`otp-input-${index + 1}`).focus();\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const handleKeyDown = (e, index) => {\r\n//     if (e.key === 'Backspace') {\r\n//       const newOtp = [...otp];\r\n//       newOtp[index] = '';\r\n//       setOtp(newOtp);\r\n\r\n//       if (index > 0) {\r\n//         document.getElementById(`otp-input-${index - 1}`).focus();\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const handleClickShowPassword = () => {\r\n//     setShowPassword(!showPassword);\r\n//   };\r\n\r\n//   const handleResendOtp = () => {\r\n//     setResendTimer(30);\r\n//     setOtpSent(false);\r\n//     setOtp(['', '', '', '', '', '']);\r\n//     setOpenOtpDialog(true);\r\n//     // Logic to resend OTP (for now, we just simulate it)\r\n//   };\r\n\r\n//   // Render the form (no changes needed in the form structure)\r\n//   return (\r\n//     <Container component=\"main\" maxWidth=\"xs\">\r\n//       <Box\r\n//         sx={{\r\n//           display: 'flex',\r\n//           flexDirection: 'column',\r\n//           alignItems: 'center',\r\n//           justifyContent: 'center',\r\n//           minHeight: '100vh',\r\n//           py: 8,\r\n//         }}\r\n//       >\r\n//         {/* Login Form */}\r\n//         {!otpSent && (\r\n//           <>\r\n//             <img\r\n//               alt=\"Your Company\"\r\n//               src=\"https://tailwindui.com/plus/img/logos/mark.svg?color=indigo&shade=600\"\r\n//               style={{ height: 40, width: 'auto', marginBottom: '20px' }}\r\n//             />\r\n//             <Typography variant=\"h5\" component=\"h1\" align=\"center\" gutterBottom sx={{ color: '#0F0F0F' }}>\r\n//               Sign in to your account\r\n//             </Typography>\r\n\r\n//             <Box component=\"form\" sx={{ display: 'flex', flexDirection: 'column', gap: 2, width: '100%' }} noValidate>\r\n//               <TextField\r\n//                 label=\"Email address\"\r\n//                 id=\"email\"\r\n//                 name=\"email\"\r\n//                 type=\"email\"\r\n//                 required\r\n//                 fullWidth\r\n//                 autoComplete=\"email\"\r\n//                 variant=\"outlined\"\r\n//                 size=\"small\"\r\n//                 value={email}\r\n//                 onChange={(e) => setEmail(e.target.value)}\r\n//                 sx={{\r\n//                   input: { color: '#0F0F0F' },\r\n//                   label: { color: '#0F0F0F' },\r\n//                   '& .MuiOutlinedInput-root': {\r\n//                     '& fieldset': { borderColor: '#E4E4E7' },\r\n//                     '&:hover fieldset': { borderColor: '#4F39F6' },\r\n//                   },\r\n//                 }}\r\n//               />\r\n\r\n//               <TextField\r\n//                 label=\"Password\"\r\n//                 id=\"password\"\r\n//                 name=\"password\"\r\n//                 type={showPassword ? 'text' : 'password'}\r\n//                 value={password}\r\n//                 onChange={(e) => setPassword(e.target.value)}\r\n//                 required\r\n//                 fullWidth\r\n//                 autoComplete=\"current-password\"\r\n//                 variant=\"outlined\"\r\n//                 size=\"small\"\r\n//                 sx={{\r\n//                   input: { color: '#0F0F0F' },\r\n//                   label: { color: '#0F0F0F' },\r\n//                   '& .MuiOutlinedInput-root': {\r\n//                     '& fieldset': { borderColor: '#E4E4E7' },\r\n//                     '&:hover fieldset': { borderColor: '#4F39F6' },\r\n//                   },\r\n//                 }}\r\n//                 InputProps={{\r\n//                   endAdornment: (\r\n//                     <InputAdornment position=\"end\">\r\n//                       <IconButton\r\n//                         aria-label=\"toggle password visibility\"\r\n//                         onClick={handleClickShowPassword}\r\n//                         edge=\"end\"\r\n//                         sx={{ color: '#4F39F6' }}\r\n//                       >\r\n//                         {showPassword ? <VisibilityOff /> : <Visibility />}\r\n//                       </IconButton>\r\n//                     </InputAdornment>\r\n//                   ),\r\n//                 }}\r\n//               />\r\n\r\n//               <Button\r\n//                 type=\"submit\"\r\n//                 fullWidth\r\n//                 variant=\"contained\"\r\n//                 color=\"primary\"\r\n//                 sx={{\r\n//                   py: 0.8,\r\n//                   fontSize: '0.875rem',\r\n//                   fontWeight: 'bold',\r\n//                   borderRadius: '4px',\r\n//                   backgroundColor: '#4F39F6',\r\n//                   textTransform: 'none',\r\n//                   '&:hover': { backgroundColor: '#3A28D3' },\r\n//                 }}\r\n//                 onClick={handleSubmit}\r\n//               >\r\n//                 Sign in\r\n//               </Button>\r\n//             </Box>\r\n//           </>\r\n//         )}\r\n\r\n//         {/* OTP Dialog */}\r\n//         <Dialog open={openOtpDialog} onClose={() => setOpenOtpDialog(false)}>\r\n//           <DialogTitle>Enter OTP</DialogTitle>\r\n//           <DialogContent>\r\n//             <Box sx={{ display: 'flex', gap: 1 }}>\r\n//               {otp.map((digit, index) => (\r\n//                 <TextField\r\n//                   key={index}\r\n//                   id={`otp-input-${index}`}\r\n//                   value={digit}\r\n//                   onChange={(e) => handleOtpChange(e, index)}\r\n//                   onKeyDown={(e) => handleKeyDown(e, index)}\r\n//                   variant=\"outlined\"\r\n//                   size=\"small\"\r\n//                   sx={{ width: 40 }}\r\n//                   inputProps={{ maxLength: 1 }}\r\n//                 />\r\n//               ))}\r\n//             </Box>\r\n//             {otpError && <Typography color=\"error\">{otpError}</Typography>}\r\n//             {resendTimer === 0 ? (\r\n//               <Button onClick={handleResendOtp}>Resend OTP</Button>\r\n//             ) : (\r\n//               <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 2 }}>\r\n//                 Resend OTP in {resendTimer} seconds\r\n//               </Typography>\r\n//             )}\r\n//           </DialogContent>\r\n//           <DialogActions>\r\n//             <Button onClick={() => setOpenOtpDialog(false)} color=\"secondary\">\r\n//               Cancel\r\n//             </Button>\r\n//             <Button onClick={handleOtpSubmit} color=\"primary\">\r\n//               Verify\r\n//             </Button>\r\n//           </DialogActions>\r\n//         </Dialog>\r\n//       </Box>\r\n//     </Container>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n// src/components/LoginForm.js\r\n\r\n'use client';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TextField, Button, Typography, Box, Container, InputAdornment, IconButton, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\r\nimport { useRouter } from 'next/navigation'; // Next.js navigation\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { login } from '../features/auth/authSlice';\r\n\r\nexport default function LoginForm() {\r\n  const [email, setEmail] = useState('daschinmaya260@gmail.com');\r\n  const [password, setPassword] = useState('123');\r\n  const [error, setError] = useState('');\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [otp, setOtp] = useState(['', '', '', '', '', '']);\r\n  const [otpError, setOtpError] = useState('');\r\n  const [otpSent, setOtpSent] = useState(false);\r\n  const [openSnackbar, setOpenSnackbar] = useState(false);\r\n  const [openOtpDialog, setOpenOtpDialog] = useState(false);\r\n  const [resendTimer, setResendTimer] = useState(30); // Time in seconds to wait before resending OTP\r\n\r\n  const router = useRouter();\r\n  const dispatch = useDispatch();\r\n\r\n  // Get users from Redux store\r\n  const users = useSelector((state) => state.auth.users);\r\n\r\n  // Check if the user is already logged in\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      router.push('/notes');\r\n    }\r\n  }, []);\r\n\r\n  // Resend OTP timer logic\r\n  useEffect(() => {\r\n    let timer;\r\n    if (resendTimer > 0 && otpSent) {\r\n      timer = setInterval(() => {\r\n        setResendTimer((prev) => prev - 1);\r\n      }, 1000);\r\n    }\r\n    return () => clearInterval(timer);\r\n  }, [resendTimer, otpSent]);\r\n\r\n  const validateEmail = (email) => {\r\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n    return emailRegex.test(email);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateEmail(email)) {\r\n      setError('Please enter a valid email address');\r\n      return;\r\n    }\r\n\r\n    // Find the user in the Redux users list\r\n    const user = users.find((user) => user.email === email && user.password === password);\r\n\r\n    if (user) {\r\n      setError('');\r\n      setOtpSent(true);\r\n      setOpenOtpDialog(true);\r\n    } else {\r\n      setError('Invalid email or password');\r\n    }\r\n  };\r\n\r\n  const handleOtpSubmit = () => {\r\n    const otpValue = otp.join('');\r\n\r\n    // Simulate OTP verification (hardcoded as '123456' for this example)\r\n    if (otpValue === '123456') {\r\n      const user = users.find((user) => user.email === email);\r\n\r\n      if (user) {\r\n        // Store token and user data in Redux and localStorage\r\n        dispatch(login({ token: user.token, username: user.name, role: user.role, email: user.email }));\r\n        localStorage.setItem('token', user.token);\r\n        localStorage.setItem('username', user.name);\r\n        localStorage.setItem('role', user.role);\r\n        localStorage.setItem('email', user.email);\r\n\r\n        setOpenSnackbar(true);\r\n        // Redirect based on role\r\n        if (user.role === 'admin') {\r\n          router.push('/admin-pannel');\r\n        } else {\r\n          router.push('/notes');\r\n        }\r\n        setOpenOtpDialog(false); // Close the OTP dialog after successful login\r\n      } else {\r\n        setOtpError('User not found.');\r\n      }\r\n    } else {\r\n      setOtpError('Invalid OTP. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleOtpChange = (e, index) => {\r\n    const value = e.target.value;\r\n\r\n    if (/^\\d$/.test(value) || value === '') {\r\n      const newOtp = [...otp];\r\n      newOtp[index] = value;\r\n      setOtp(newOtp);\r\n\r\n      // Auto submit OTP if all digits are filled\r\n      if (newOtp.every((digit) => digit !== '') && newOtp.length === 6) {\r\n        handleOtpSubmit();\r\n      }\r\n\r\n      if (value && index < otp.length - 1) {\r\n        document.getElementById(`otp-input-${index + 1}`).focus();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e, index) => {\r\n    if (e.key === 'Backspace') {\r\n      const newOtp = [...otp];\r\n      newOtp[index] = '';\r\n      setOtp(newOtp);\r\n\r\n      if (index > 0) {\r\n        document.getElementById(`otp-input-${index - 1}`).focus();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const handleResendOtp = () => {\r\n    setResendTimer(30);\r\n    setOtpSent(false);\r\n    setOtp(['', '', '', '', '', '']);\r\n    setOpenOtpDialog(true);\r\n    // Logic to resend OTP (for now, we just simulate it)\r\n  };\r\n\r\n  // Render the form (no changes needed in the form structure)\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          minHeight: '100vh',\r\n          py: 8,\r\n        }}\r\n      >\r\n        {/* Login Form */}\r\n        {!otpSent && (\r\n          <>\r\n            <img\r\n              alt=\"Your Company\"\r\n              src=\"https://tailwindui.com/plus/img/logos/mark.svg?color=indigo&shade=600\"\r\n              style={{ height: 40, width: 'auto', marginBottom: '20px' }}\r\n            />\r\n            <Typography variant=\"h5\" component=\"h1\" align=\"center\" gutterBottom sx={{ color: '#0F0F0F' }}>\r\n              Sign in to your account\r\n            </Typography>\r\n\r\n            <Box component=\"form\" sx={{ display: 'flex', flexDirection: 'column', gap: 2, width: '100%' }} noValidate>\r\n              <TextField\r\n                label=\"Email address\"\r\n                id=\"email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                required\r\n                fullWidth\r\n                autoComplete=\"email\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                sx={{\r\n                  input: { color: '#0F0F0F' },\r\n                  label: { color: '#0F0F0F' },\r\n                  '& .MuiOutlinedInput-root': {\r\n                    '& fieldset': { borderColor: '#E4E4E7' },\r\n                    '&:hover fieldset': { borderColor: '#4F39F6' },\r\n                  },\r\n                }}\r\n              />\r\n\r\n              <TextField\r\n                label=\"Password\"\r\n                id=\"password\"\r\n                name=\"password\"\r\n                type={showPassword ? 'text' : 'password'}\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                required\r\n                fullWidth\r\n                autoComplete=\"current-password\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                sx={{\r\n                  input: { color: '#0F0F0F' },\r\n                  label: { color: '#0F0F0F' },\r\n                  '& .MuiOutlinedInput-root': {\r\n                    '& fieldset': { borderColor: '#E4E4E7' },\r\n                    '&:hover fieldset': { borderColor: '#4F39F6' },\r\n                  },\r\n                }}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        onClick={handleClickShowPassword}\r\n                        edge=\"end\"\r\n                        sx={{ color: '#4F39F6' }}\r\n                      >\r\n                        {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                sx={{\r\n                  py: 0.8,\r\n                  fontSize: '0.875rem',\r\n                  fontWeight: 'bold',\r\n                  borderRadius: '4px',\r\n                  backgroundColor: '#4F39F6',\r\n                  textTransform: 'none',\r\n                  '&:hover': { backgroundColor: '#3A28D3' },\r\n                }}\r\n                onClick={handleSubmit}\r\n              >\r\n                Sign in\r\n              </Button>\r\n            </Box>\r\n          </>\r\n        )}\r\n\r\n        {/* OTP Dialog */}\r\n        <Dialog open={openOtpDialog} onClose={() => setOpenOtpDialog(false)}>\r\n          <DialogTitle>Enter OTP</DialogTitle>\r\n          <DialogContent>\r\n            <Box sx={{ display: 'flex', gap: 1 }}>\r\n              {otp.map((digit, index) => (\r\n                <TextField\r\n                  key={index}\r\n                  id={`otp-input-${index}`}\r\n                  value={digit}\r\n                  onChange={(e) => handleOtpChange(e, index)}\r\n                  onKeyDown={(e) => handleKeyDown(e, index)}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  sx={{ width: 40 }}\r\n                  inputProps={{ maxLength: 1 }}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {otpError && <Typography color=\"error\">{otpError}</Typography>}\r\n            {resendTimer === 0 ? (\r\n              <Button onClick={handleResendOtp}>Resend OTP</Button>\r\n            ) : (\r\n              <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 2 }}>\r\n                Resend OTP in {resendTimer} seconds\r\n              </Typography>\r\n            )}\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => setOpenOtpDialog(false)} color=\"secondary\">\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleOtpSubmit} color=\"primary\">\r\n              Verify\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 772, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}